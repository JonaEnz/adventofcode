#!fsharp

open System.IO
type Point = {x:int;y:int;}
let parsePoint (s:string) = s.Split(",") |> fun ps -> {x=int(ps[0]);y=int(ps[1])}
let createLine (pointArr:Point[]) =
    let x,y = [pointArr[0].x; pointArr[1].x], [pointArr[0].y; pointArr[1].y]
    let xs0, ys = [List.min x .. List.max x], [List.min y .. List.max y]
    let xs = if  (x[0] > x[1]) = (y[0] > y[1]) then xs0 else List.rev xs0 //reverse if diagonal in / direction
    let comb = if xs.Length = 1 || ys.Length = 1 then List.allPairs else List.zip 
    comb xs ys |> List.toSeq

let countIntersectingFields points = 
    points
    |> Seq.collect createLine
    |> Seq.countBy id
    |> Seq.filter (fun (k, n) -> n > 1)
    |> Seq.length

let pointSeq = File.ReadAllLines("input.txt") |> Array.toSeq |> Seq.map (fun s -> Array.map parsePoint (s.Split(" -> ")))
let part1 = 
    pointSeq |> Seq.filter (fun ps -> ps[0].x = ps[1].x || ps[0].y = ps[1].y)
    |> countIntersectingFields
printfn "Part 1: %d" part1
printfn "Part 2: %d" (countIntersectingFields pointSeq)
