#!fsharp

open System.IO
let lines = File.ReadAllLines("input.txt")

type Player = {pos:int; score:int64;}

let playerStart i = lines[i-1].Split(": ")[1] |> fun p -> {pos=(int p);score=0L}

#!fsharp

let deterministicdie = Seq.initInfinite (fun i -> i, (i % 100) + 1)

let move player (die: (int*int) seq) =
    let mv = Seq.take 3 die |> Seq.sumBy (snd)
    let nextPos = ((player.pos - 1 + mv) % 10) + 1
    {pos= nextPos; score=player.score + int64 nextPos}, Seq.skip 3 die

let rec play play1 play2 (die: (int*int) seq) =
    let (play1', die') = move play1 die
    let (play2', die'') = move play2 die'
    match play1', play2' with
    | p, _ when p.score >= 1000 -> 1, play1', play2', Seq.head die''
    | _, p when p.score >= 1000 -> 2, play1', play2', Seq.head die''
    | _, _ -> play play1' play2' die''

play (playerStart 1) (playerStart 2) deterministicdie
|> fun (win, p1, p2, die) -> (if win=2 then p1.score else p2.score) * (fst die |> int64)

#!fsharp

let probs = 
    List.map (fun ((i,j),k) -> i+j+k) (List.allPairs (List.allPairs [1..3] [1..3]) [1..3])
    |> List.countBy id
    |> List.map (fun (k,v) -> k, int64 v)

let move2 player amount =
    let nextPos = ((player.pos - 1 + amount) % 10) + 1
    {player with pos= nextPos; score = player.score + (int64 nextPos)}

let sum2 mapping l = l |> Seq.fold mapping (0L,0L)

let rec play2 player1 player2 =
    if player2.score >= 21 then
        (0L,1L)
    else
        probs
        |> sum2 (fun (w1,w2) (r,factor) ->
            let (w2',w1') = play player2 (move2 player1 r)
            factor * w1' + w1, factor * w2' + w2
        )

play2 (playerStart 1) (playerStart 2)
|> fun r -> if r ||> (>) then fst r else snd r
