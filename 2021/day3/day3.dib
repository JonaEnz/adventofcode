#!fsharp

open System.IO
let lines = 
    File.ReadAllLines("input.txt")
        |> Array.map Seq.toArray
let rec decodeBinary one s = 
    match s with
    | [] -> 0.0
    | x :: xs -> (if x = one then (2.0 ** float(s.Length - 1)) else 0) + decodeBinary one xs

let transpose (matrix:_[][]) =
    Array.init matrix[0].Length (fun i ->
        Array.init matrix.Length (fun j ->
        matrix[j][i]))

let bin oneP one zero list= 
    list 
    |> transpose 
    |> Array.map (Array.filter ((=) oneP)) 
    |> Array.map Array.length 
    |> Array.map (fun i ->if ((float i )>= (float(list.Length) / 2.0)) then one else zero) 
    |> Array.toList 

let gamma =  decodeBinary 1 (bin '1' 1 0 lines)
let epsilon = decodeBinary 0 (bin '1' 1 0 lines)

printfn "Part 1: %d" (int(gamma * epsilon))

#!fsharp

let binAt  list i= (bin '1' '1' '0' list)[i]

let rec step i (list : char[][]) = list |> Array.filter (fun a -> ((a[i]) = (binAt list i)))

let rec step2 i (list : char[][]) = list |> Array.filter (fun a -> (not ((a[i]) = (binAt list i))))

let rec run stepFun i (list : char[][]) =
    match list.Length with
    | 1 -> list[0]
    | _ -> run stepFun (i+1) (stepFun i list)

let oxygen = decodeBinary '1' (Array.toList(run step 0 lines))
let co2 = decodeBinary '1' (Array.toList(run step2 0 lines))

co2 * oxygen
