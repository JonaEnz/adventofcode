#!fsharp

open System.IO
let lines = 
    File.ReadAllLines("input.txt")
        |> Array.map Seq.toArray
let rec decodeBinary one s = 
    match s with
    | [] -> 0
    | x :: xs -> (if x = one then int(2.0 ** float(s.Length - 1)) else 0) + decodeBinary one xs
let isMostCommon element array = array |> Array.filter ((=) element) |> Array.length |> float |> (<=) (float(array.Length) / 2.0)
let mostCommon oneP one zero list= 
    list 
    |> Array.toSeq |> Array.transpose
    |> Array.map (fun e -> if (isMostCommon oneP e) then one else zero)
    |> Array.toList 

let result = mostCommon '1' 1 0 lines |> fun l -> (decodeBinary 1 l, decodeBinary 0 l)
printfn "Part 1: %d" (fst result * snd result)

#!fsharp

let mostCommonAt list i= (mostCommon '1' '1' '0' list)[i]
let filterWithAt op i (list : char[][]) = list |> Array.filter (fun a ->  (op a[i] (mostCommonAt list i)))

let rec run step i (list : char[][]) =
    match list.Length with
    | 1 -> list[0]
    | _ -> run step (i+1) (step i list)

let part2result op =  decodeBinary '1' (Array.toList(run (filterWithAt op) 0 lines))
printfn "Part 2: %d" ((part2result (=)) * (part2result (<>)))
