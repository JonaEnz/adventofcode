#!fsharp

open System.IO
let lines = 
    File.ReadAllText("input.txt").Split("\n\n")

type Board = {board: int[,]; marked : (int * int) list}

let boardIndices = List.collect (fun x -> List.init 5 (fun y -> (x,y))) [0..4]

let draw = lines[0].Split(",") |> Array.map int
let boards = 
    lines[1..] 
    |> Array.map (fun s -> //Board
        (s.Split("\n"))
        |> Array.map (fun st -> ( //Line
            st.Split()
            |> Array.filter (fun st -> st.Length <> 0)
            |> Array.map int)))
    |> Array.map (fun a -> array2D a[0..4])
    |> Array.map (fun p -> {board = p; marked = List.empty}) 

#!fsharp

let isWin board =
    let checkX x = List.fold (fun state i -> state && List.contains (x,i) board.marked) true [0..4]
    let checkY y = List.fold (fun state i -> state && List.contains (i,y) board.marked) true [0..4]
    List.exists (fun i -> checkX i || checkY i) [0..4]

let markOnBoard number b= {board = b.board;
    marked = boardIndices |> List.filter (fun (x,y) -> (b.board[x,y] = number)) |> List.append b.marked}

let step number = Array.map (markOnBoard number)

let rec runPart1 (d:int[]) last bs =
    let winning = Array.filter isWin bs
    match winning.Length > 0, d with
    | true, _ -> Some (winning[0], last)
    | _, [||] -> None
    | _, _ -> runPart1 d[1..] d[0] (step d[0] bs)

let sumUnmarked b =
    boardIndices |> List.filter (fun (x,y) -> not (List.contains (x,y) b.marked)) |> List.map (fun (x,y) -> b.board[x,y]) |> List.sum

let s = (Option.get (runPart1 draw 0 boards))
sumUnmarked (fst s) * (snd s)

#!fsharp

let rec runPart2 (d:int[]) last lastB bs =
    let notWinning = Array.filter (fun b -> not (isWin b)) bs
    match notWinning.Length = 0, d with
    | true, _ -> Some (lastB, last)
    | _, [||] -> None
    | _, _ -> runPart2 d[1..] d[0] notWinning[0] (step d[0] bs)

let s = (Option.get (runPart2 draw 0 boards[0] boards))
(sumUnmarked (fst s) - (snd s)) * (snd s)
