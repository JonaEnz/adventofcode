#!fsharp

open System.IO
let lines = File.ReadAllLines("input.txt") |> Array.head |> (fun s -> s.Split(",")) |> Array.map int
let init = List.map (fun i -> Array.filter ((=) i) lines |> Array.length |> float) [0..8]
let genAdd zeroCount = [zeroCount; 0.0;zeroCount] |> List.append (List.replicate 6 0)

let step list = List.map2 (+) (List.append (List.tail list) [0.0]) (genAdd (List.head list))
let simulate start days = List.fold (fun s _ -> step s) start [0..days-1] |> List.sum

#!fsharp

simulate init 80

#!fsharp

simulate 256

#!fsharp

//Alternative solution with matrices
#r "nuget: FSPowerPack.Community"
open Microsoft.FSharp.Math
let m = matrix [
    [0;1;0;0;0;0;0;0;0];
    [0;0;1;0;0;0;0;0;0];
    [0;0;0;1;0;0;0;0;0];
    [0;0;0;0;1;0;0;0;0];
    [0;0;0;0;0;1;0;0;0];
    [0;0;0;0;0;0;1;0;0];
    [1;0;0;0;0;0;0;1;0];
    [0;0;0;0;0;0;0;0;1];
    [1;0;0;0;0;0;0;0;0];
    ]
let tm n = Array.fold (fun s t -> s * m) m (Array.create (n-1) 0)
let m2 = matrix (List.map (fun a -> [(float a)]) init)
Matrix.sum ((tm 80) * m2)
Matrix.sum ((tm 256) * m2)

#!fsharp

#r "nuget: MathNet.Numerics"
#r "nuget: MathNet.Numerics.FSharp"
open MathNet.Numerics
open MathNet.Numerics.LinearAlgebra

let m = matrix [
    [0.;1.;0.;0.;0.;0.;0.;0.;0.];
    [0.;0.;1.;0.;0.;0.;0.;0.;0.];
    [0.;0.;0.;1.;0.;0.;0.;0.;0.];
    [0.;0.;0.;0.;1.;0.;0.;0.;0.];
    [0.;0.;0.;0.;0.;1.;0.;0.;0.];
    [0.;0.;0.;0.;0.;0.;1.;0.;0.];
    [1.;0.;0.;0.;0.;0.;0.;1.;0.];
    [0.;0.;0.;0.;0.;0.;0.;0.;1.];
    [1.;0.;0.;0.;0.;0.;0.;0.;0.];
    ]
let m2 = matrix (List.map (fun a -> [(float a)])   init)
Matrix.sum ((m.Power 80) * m2)

#!fsharp

Matrix.sum ((m.Power 7000) * m2)
