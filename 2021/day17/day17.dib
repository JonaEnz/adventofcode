#!fsharp

open System.IO
open System.Text.RegularExpressions
let lines = File.ReadAllLines("input.txt")
let input = 
    Regex.Match (lines[0], "target area: x=(-?\d+)\.\.(-?\d+), y=(-?\d+)\.\.(-?\d+)")
    |> fun m -> List.tail [for g in m.Groups -> g.Value] 
    |> List.map int

#!fsharp

let step x y xVel yVel =
    x+xVel, y+yVel, (if xVel > 0 then xVel - 1 else if xVel = 0 then 0 else xVel + 1 ), yVel - 1

let rec hitsArea heightRecord (gxl,gxu,gyl,gyu) x y xVel yVel = 
    match step x y xVel yVel, heightRecord with
    | (x,y,xVel,yVel), hr when x >= gxl && x <= gxu && y >= gyl && y <= gyu -> Some (x,y,(if hr > y then hr else y))
    | (x,y,xVel,yVel), _ when y < gyl -> None
    | (x,y,xVel,yVel), hr -> hitsArea (if hr > y then hr else y) (gxl,gxu,gyl,gyu) x y xVel yVel

input
|>fun i -> List.allPairs [0..i[1]] [i[2]..i[1]] 
|> List.map (fun (x,y) -> x,y,hitsArea (-999) (input[0],input[1],input[2],input[3]) 0 0 x y) 
|> List.filter (fun (_,_,o) -> Option.isSome o)
|> List.map (fun (x,y,o) ->
    match o with
    | Some (_,_,r) -> x,y,r
    | None -> 0,0,0
    )
|> List.sortByDescending (fun (x,y,r) -> r)
|> List.head |> fun (_,_,r) -> r

#!fsharp

input
|>fun i -> List.allPairs [0..i[1]] [i[2]..i[1]] 
|> List.map (fun (x,y) -> x,y,hitsArea (-999) (input[0],input[1],input[2],input[3]) 0 0 x y) 
|> List.filter (fun (_,_,o) -> Option.isSome o)
|> List.length
