#!fsharp

open System.IO
let lines = File.ReadAllLines("input.txt")

type PacketType =
| Operator of int
| Literal of int64

type Packet = {version: int64; pType:PacketType; packets: Packet list}

#!fsharp

let hexToBin s = Convert.ToInt32(s, 16) |> fun i -> Convert.ToString(i,2).PadLeft(4, '0')

let rec toBits n =
    if n=0 then ""
    else if n % 2 = 1
    then (toBits (n/2)) + "1" 
    else (toBits (n/2)) + "0"

let toNumber s =
    let rec toNumberInner s =
        match s  with
        | i :: is -> 
            if i = '1'
            then 2L * toNumberInner is + 1L
            else 2L * toNumberInner is + 0L
        | [] -> 0L
    toNumberInner (Seq.toList s |> List.rev)

#!fsharp

let read =
    File.ReadLines("input.txt")
    |> Seq.head
    |> Seq.map (Char.ToString >> hexToBin)
    |> String.Concat

let readLiteral (s:string) =
    let rec rl (s:string) =
        match s[0] with
        | '1' -> s[1..4] + rl s[5..]
        | _   -> s[1..4]
    toNumber (rl s), s[((float (rl s).Length) * 1.25 |> int)..]

let getLiteral packet =
    match packet.pType with
    | Literal i -> i
    | _ -> 0L

let rec readPacket (s:string) =
    let readPacketsOfLength (s:string) i =
        let rec recReadLen acc (s'':string) i =
            match i with
            | 0 -> acc, s''
            | _ -> 
                let (p, s') = readPacket s''
                recReadLen (List.append acc [p]) s' (i-(s''.Length) + (s'.Length))
        recReadLen [] s i


    let readNPackets (s:string) (n:int64) =
        List.mapFold (fun s' t -> readPacket s') s [1..int n]
    
    let readSubPackets (s:string) =
        match s[0] with
        | '0' -> readPacketsOfLength s[16..] (toNumber s[1..15] |> int)
        | _   -> readNPackets s[12..] (toNumber s[1..11])

    match toNumber s[3..5] with
    | i when i=4 ->
        let (lit, s') = readLiteral s[6..]
        {
        version= toNumber s[..2];
        pType= Literal lit; 
        packets = []
        }, s'
    | i when i=0-> 
        let (packets, s') = readSubPackets s[6..]  
        {
        version= toNumber s[..2];
        pType= Literal (List.sumBy (fun p -> getLiteral p) packets); 
        packets = []
        }, s'
    | i when i=1-> 
        let (packets, s') = readSubPackets s[6..]  
        {
        version= toNumber s[..2];
        pType= Literal (List.map (fun p -> getLiteral p) packets |> List.fold (*) 1L); 
        packets = []
        }, s'
    | i when i=2-> 
        let (packets, s') = readSubPackets s[6..]  
        {
        version= toNumber s[..2];
        pType= Literal (List.map (fun p -> getLiteral p) packets |> List.min); 
        packets = []
        }, s'
    | i when i=3-> 
        let (packets, s') = readSubPackets s[6..]  
        {
        version= toNumber s[..2];
        pType= Literal (List.map (fun p -> getLiteral p) packets |> List.max); 
        packets = []
        }, s'
    | i when i=5-> 
        let (packets, s') = readSubPackets s[6..]  
        {
        version= toNumber s[..2];
        pType= Literal (if (getLiteral packets[0]) > (getLiteral packets[1]) then 1L else 0L)
        packets = []
        }, s'
    | i when i=6-> 
        let (packets, s') = readSubPackets s[6..]  
        {
        version= toNumber s[..2];
        pType= Literal (if (getLiteral packets[0]) < (getLiteral packets[1]) then 1L else 0L)
        packets = []
        }, s'
    | i when i=7-> 
        let (packets, s') = readSubPackets s[6..]  
        {
        version= toNumber s[..2];
        pType= Literal (if (getLiteral packets[0]) = (getLiteral packets[1]) then 1L else 0L)
        packets = []
        }, s'
    | i -> 
        let (packets, s') = readSubPackets s[6..]  
        {
        version= toNumber s[..2];
        pType= Operator (int i); 
        packets = packets
        }, s'

let rec getVersionSum pack =
    match pack.packets with
    | [] -> pack.version
    | p :: ps -> pack.version + (List.map getVersionSum pack.packets |> List.sum)

let rec eval pack = 1L

read
|> readPacket
|> fst
|> getLiteral
